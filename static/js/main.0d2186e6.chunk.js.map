{"version":3,"sources":["store/reducer/GlobalState.tsx","config.ts","components/Search.tsx","components/Movie.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","ApiEnv","apiKey","process","REACT_APP_DEV_API_KEY","initialState","loading","movies","errorMessage","StateContext","React","createContext","reducer","state","action","type","SEARCH_MOVIES_REQUEST","SEARCH_MOVIES_SUCCESS","payload","SEARCH_MOVIES_FAILURE","GlobalState","props","useReducer","dispatch","Provider","value","children","Search","useState","searchValue","setSearchValue","useContext","onSearch","useCallback","fetch","then","response","json","jsonResponse","Response","Error","callSearchFunction","e","preventDefault","handleSearchInputChanges","target","useEffect","useMemo","className","onChange","onClick","Movie","movie","poster","Poster","Title","width","alt","src","Year","App","map","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d2186e6.chunk.js","sourcesContent":["import React, {useReducer} from \"react\";\nimport {MovieTypes} from \"../../types/movie\";\n\nconst initialState = {\n  loading: false,\n  movies: [],\n  errorMessage: \"\"\n}\n\ninterface State {\n  loading: boolean\n  movies: MovieTypes[]\n  errorMessage: string\n}\n\ninterface StateContextType {\n  state: State\n  dispatch: React.Dispatch<SearchActionType>\n}\n\nexport const StateContext = React.createContext({} as StateContextType)\n\nexport enum ActionType {\n  SEARCH_MOVIES_REQUEST = \"SEARCH_MOVIES_REQUEST\",\n  SEARCH_MOVIES_SUCCESS = \"SEARCH_MOVIES_SUCCESS\",\n  SEARCH_MOVIES_FAILURE = \"SEARCH_MOVIES_FAILURE\"\n}\n\ninterface RequestSearchType {type: ActionType.SEARCH_MOVIES_REQUEST, loading: boolean}\ninterface SuccessSearchType {type: ActionType.SEARCH_MOVIES_SUCCESS, payload: MovieTypes[]}\ninterface FailureSearchType {type: ActionType.SEARCH_MOVIES_FAILURE, errorMessage: string}\n\ntype SearchActionType = RequestSearchType | SuccessSearchType | FailureSearchType\n\nconst reducer = (state: State, action: SearchActionType): State => {\n  switch (action.type) {\n    case ActionType.SEARCH_MOVIES_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      }\n    case ActionType.SEARCH_MOVIES_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      }\n    case ActionType.SEARCH_MOVIES_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.errorMessage,\n      }\n    default:\n      return state\n  }\n}\n\nexport const GlobalState: React.FC = (props) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={{state, dispatch}}>\n      {props.children}\n    </StateContext.Provider>\n  )\n}\n","const Config = () => {\n  return {\n    ApiEnv: {\n      apiKey: process.env.REACT_APP_DEV_API_KEY\n    }\n  }\n}\nexport const ApiEnv = Config().ApiEnv","\nimport React, {useCallback, useContext, useEffect, useMemo, useState} from \"react\";\nimport {ApiEnv} from \"../config\";\nimport {ActionType, StateContext} from \"../store/reducer/GlobalState\";\n\nconst Search: React.FC = () => {\n  const [searchValue, setSearchValue] = useState<string>(\"\");\n  const {dispatch} = useContext(StateContext);\n\n\n\n  const onSearch = useCallback((searchValue: string): void => {\n    dispatch({\n      type: ActionType.SEARCH_MOVIES_REQUEST,\n      loading: true\n    })\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=${ApiEnv.apiKey}`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === \"True\") {\n          dispatch({\n            type: ActionType.SEARCH_MOVIES_SUCCESS,\n            payload: jsonResponse.Search\n          })\n        } else {\n          dispatch({\n            type: ActionType.SEARCH_MOVIES_FAILURE,\n            errorMessage: jsonResponse.Error,\n          })\n        }\n        return\n      });\n  }, [dispatch]);\n\n  const resetInputField = () => {\n    setSearchValue(\"\")\n  }\n\n\n  const callSearchFunction = useCallback(\n    (e: React.MouseEvent<HTMLInputElement>) => {\n      e.preventDefault();\n      onSearch(searchValue);\n      resetInputField();\n    }, [onSearch, searchValue])\n\n\n  const handleSearchInputChanges = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setSearchValue(e.target.value);\n    }, [])\n\n\n  useEffect(() => {\n    onSearch('SpiderMan');\n  }, [onSearch]);\n\n\n  const memoResult = useMemo(() => {\n    return (\n      <form className=\"search\">\n        <input\n          value={searchValue}\n          onChange={handleSearchInputChanges}\n          type=\"text\"\n        />\n        <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\n      </form>\n    );\n  }, [callSearchFunction, handleSearchInputChanges, searchValue])\n\n\n\n\n  return memoResult;\n}\n\nexport default Search;","import React, {useMemo} from \"react\";\nimport {MovieTypes} from \"../types/movie\"\nconst DEFAULT_PLACEHOLDER_IMAGE =\n  \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\n\n\n\nconst Movie: React.FC<MovieTypes> = (movie) => {\n  const poster =\n    movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\n  const memoResult = useMemo(() => {\n    return (\n      <div className=\"movie\">\n        <h2>{movie.Title}</h2>\n        <div>\n          <img\n            width=\"200\"\n            alt={`The movie titled: ${movie.Title}`}\n            src={poster}\n          />\n        </div>\n        <p>({movie.Year})</p>\n      </div>\n    );\n  }, [movie.Title, movie.Year, poster])\n  return memoResult;\n};\n\n\nexport default Movie;","import {useContext} from 'react';\nimport './App.css';\nimport Search from './components/Search';\nimport Movie from './components/Movie';\nimport {StateContext} from './store/reducer/GlobalState';\n\nfunction App() {\n  const {state} = useContext(StateContext)\n  const {loading, errorMessage, movies} = state;\n  return (\n    <div className=\"App\">\n      <Search />\n      <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n          <span>loading...</span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie key={`${index}`} {...movie} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {GlobalState} from './store/reducer/GlobalState';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalState>\n      <App />\n    </GlobalState>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}